<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta keywords="">
    <title>Nazar Kucheruk - Revolutionizing Intelligence</title>
    <link
      href="https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@400;600;800&display=swap"
      rel="stylesheet"
    />
    <script
      src="https://kit.fontawesome.com/15181efa86.js"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/Swiper/8.4.5/swiper-bundle.min.js"
      crossorigin="anonymous"
    ></script>
		<link
      href="https://cdn.jsdelivr.net/npm/swiper@8/swiper-bundle.min.css"
      rel="stylesheet"
    />
		
    <link
      rel="apple-touch-icon"
      type="image/png"
      href="https://cpwebassets.codepen.io/assets/favicon/apple-touch-icon-5ae1a0698dcc2402e9712f7d01ed509a57814f994c660df9f7a952f3060705ee.png"
    />

    <meta name="apple-mobile-web-app-title" content="CodePen" />

    <link
      rel="shortcut icon"
      type="image/x-icon"
      href="https://cpwebassets.codepen.io/assets/favicon/favicon-aec34940fbc1a6e787974dcd360f2c6b63348d4b1f4e06c77743096d55480f33.ico"
    />

    <link
      rel="mask-icon"
      type="image/x-icon"
      href="https://cpwebassets.codepen.io/assets/favicon/logo-pin-b4b4269c16397ad2f0f7a01bcdf513a1994f4c94b8af2f191c09eb0d601762b1.svg"
      color="#111"
    />
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"
      crossorigin="anonymous"
    ></script>
    <script src="https://cpwebassets.codepen.io/assets/common/stopExecutionOnTimeout-2c7831bb44f98c1391d6a4ffda0e1fd302503391ca806e7fcc7b9b87197aec26.js"></script>

    Z
    <link
      rel="stylesheet"
      href="https://unpkg.com/bulma@1.0.0/css/bulma.min.css"
    />
    <link rel="stylesheet" type="text/css" href="css/style.css" />
  </head>

  <body>
    <div class="particle-network-animation"></div> 

    <section class="hero is-medium" style="position: relative">
      <canvas id="waterCanvas"></canvas>
      <div class="hero-body">
        <div class="container">
          <h1 class="title">
            Nazar <span class="intelligence">Kucheruk</span>
          </h1>
          <h2 class="subtitle">
            A Software Engineer 
            <br />Desiring Robust and Flexible World
          </h2>
        </div>
      </div>
    </section>
    <section id="parallax-1" class="hero is-large">
      <div class="hero-body">
        <div class="container">
          <div class="columns">
            <div class="column is-8 is-offset-4">
              <h1 class="title is-1">About me</h1>
              <hr class="content-divider" />
              <h2 class="subtitle">
              	A software developer experienced and loving building modern websites with: 
              	<ul>
              		<li> <span class="intelligence">Node.js</span> with  <span class="intelligence">React.js</span> and  <span class="intelligence">Next.js</span> for various size of buinesses</li>
              		<li> <span class="intelligence">Rust</span> with  <span class="intelligence">Tauri</span> and  <span class="intelligence">Dixous</span></li>
              		<li> <span class="intelligence">C++</span>,  <span class="intelligence">Node.js</span>,  <span class="intelligence">Rust</span>,  <span class="intelligence">Laravel</span>,  <span class="intelligence">Golang</span>,  <span class="intelligence">Python/Django/Flask</span></li> 
                  <li>Very familiar with  <span class="intelligence">AWS</span>,  <span class="intelligence">GCP</span> infra</li>
               	  <li>Solid knowledge with mobile development with  <span class="intelligence">React Native</span>,  <span class="intelligence">iOS SwiftUI</span></li>
               	</ul>
               	<br />
                  Get focused delivery  <span class="intelligence">Good</span> result on  <span class="intelligence">Time</span> and excellent reviews!
               	<br />
               	<br />
                  Thank you!
              </h2> 
            </div>
          </div>
        </div>
      </div>
    </section>
    <!-- <section id="parallax-3" class="hero is-large">
      <div class="hero-body">
        <div class="container">
          <div class="columns">
            <div class="column is-8 is-offset-4">
              <h1 class="title is-1">Teaser</h1>
              <hr class="content-divider" />
              <h2 class="subtitle">
                Abstract visuals or silhouettes hinting at your technology.
              </h2>
            </div>
          </div>
        </div>
      </div>
    </section> -->

    <script type="text/javascript">
      (function () {
        var ParticleNetworkAnimation, PNA;
        ParticleNetworkAnimation = PNA = function () {};

        PNA.prototype.init = function (element) {
          this.$el = $(element);

          this.container = element;
          this.canvas = document.createElement("canvas");
          this.sizeCanvas();
          this.container.appendChild(this.canvas);
          this.ctx = this.canvas.getContext("2d");
          this.particleNetwork = new ParticleNetwork(this);

          this.bindUiActions();

          return this;
        };

        PNA.prototype.bindUiActions = function () {
          $(window).on(
            "resize",
            function () {
              // this.sizeContainer();
              this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
              this.sizeCanvas();
              this.particleNetwork.createParticles();
            }.bind(this)
          );
        };

        PNA.prototype.sizeCanvas = function () {
          this.canvas.width = this.container.offsetWidth;
          this.canvas.height = this.container.offsetHeight;
        };

        var Particle = function (parent, x, y) {
          this.network = parent;
          this.canvas = parent.canvas;
          this.ctx = parent.ctx;
          this.particleColor = returnRandomArrayitem(
            this.network.options.particleColors
          );
          this.radius = getLimitedRandom(1.5, 2.5);
          this.opacity = 0;
          this.x = x || Math.random() * this.canvas.width;
          this.y = y || Math.random() * this.canvas.height;
          this.velocity = {
            x: (Math.random() - 0.5) * parent.options.velocity,
            y: (Math.random() - 0.5) * parent.options.velocity,
          };
        };

        Particle.prototype.update = function () {
          if (this.opacity < 1) {
            this.opacity += 0.01;
          } else {
            this.opacity = 1;
          }
          // Change dir if outside map
          if (this.x > this.canvas.width + 100 || this.x < -100) {
            this.velocity.x = -this.velocity.x;
          }
          if (this.y > this.canvas.height + 100 || this.y < -100) {
            this.velocity.y = -this.velocity.y;
          }

          // Update position
          this.x += this.velocity.x;
          this.y += this.velocity.y;
        };

        Particle.prototype.draw = function () {
          // Draw particle
          this.ctx.beginPath();
          this.ctx.fillStyle = this.particleColor;
          this.ctx.globalAlpha = this.opacity;
          this.ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);
          this.ctx.fill();
        };

        var ParticleNetwork = function (parent) {
          this.options = {
            velocity: 1, // the higher the faster
            density: 15000, // the lower the denser
            netLineDistance: 200,
            netLineColor: "#929292",
            particleColors: ["#aaa"], // ['#6D4E5C', '#aaa', '#FFC458' ]
          };
          this.canvas = parent.canvas;
          this.ctx = parent.ctx;

          this.init();
        };

        ParticleNetwork.prototype.init = function () {
          // Create particle objects
          this.createParticles(true);

          // Update canvas
          this.animationFrame = requestAnimationFrame(this.update.bind(this));

          this.bindUiActions();
        };

        ParticleNetwork.prototype.createParticles = function (isInitial) {
          // Initialise / reset particles
          var me = this;
          this.particles = [];
          var quantity =
            (this.canvas.width * this.canvas.height) / this.options.density;

          if (isInitial) {
            var counter = 0;
            clearInterval(this.createIntervalId);
            this.createIntervalId = setInterval(
              function () {
                if (counter < quantity - 1) {
                  // Create particle object
                  this.particles.push(new Particle(this));
                } else {
                  clearInterval(me.createIntervalId);
                }
                counter++;
              }.bind(this),
              250
            );
          } else {
            // Create particle objects
            for (var i = 0; i < quantity; i++) {
              this.particles.push(new Particle(this));
            }
          }
        };

        ParticleNetwork.prototype.createInteractionParticle = function () {
          // Add interaction particle
          this.interactionParticle = new Particle(this);
          this.interactionParticle.velocity = {
            x: 0,
            y: 0,
          };
          this.particles.push(this.interactionParticle);
          return this.interactionParticle;
        };

        ParticleNetwork.prototype.removeInteractionParticle = function () {
          // Find it
          var index = this.particles.indexOf(this.interactionParticle);
          if (index > -1) {
            // Remove it
            this.interactionParticle = undefined;
            this.particles.splice(index, 1);
          }
        };

        ParticleNetwork.prototype.update = function () {
          if (this.canvas) {
            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
            this.ctx.globalAlpha = 1;

            // Draw connections
            for (var i = 0; i < this.particles.length; i++) {
              for (var j = this.particles.length - 1; j > i; j--) {
                var distance,
                  p1 = this.particles[i],
                  p2 = this.particles[j];

                // check very simply if the two points are even a candidate for further measurements
                distance = Math.min(
                  Math.abs(p1.x - p2.x),
                  Math.abs(p1.y - p2.y)
                );
                if (distance > this.options.netLineDistance) {
                  continue;
                }

                // the two points seem close enough, now let's measure precisely
                distance = Math.sqrt(
                  Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2)
                );
                if (distance > this.options.netLineDistance) {
                  continue;
                }

                this.ctx.beginPath();
                this.ctx.strokeStyle = this.options.netLineColor;
                this.ctx.globalAlpha =
                  ((this.options.netLineDistance - distance) /
                    this.options.netLineDistance) *
                  p1.opacity *
                  p2.opacity;
                this.ctx.lineWidth = 0.7;
                this.ctx.moveTo(p1.x, p1.y);
                this.ctx.lineTo(p2.x, p2.y);
                this.ctx.stroke();
              }
            }

            // Draw particles
            for (var i = 0; i < this.particles.length; i++) {
              this.particles[i].update();
              this.particles[i].draw();
            }

            if (this.options.velocity !== 0) {
              this.animationFrame = requestAnimationFrame(
                this.update.bind(this)
              );
            }
          } else {
            cancelAnimationFrame(this.animationFrame);
          }
        };

        ParticleNetwork.prototype.bindUiActions = function () {
          // Mouse / touch event handling
          this.spawnQuantity = 3;
          this.mouseIsDown = false;
          this.touchIsMoving = false;

          this.onMouseMove = function (e) {
            if (!this.interactionParticle) {
              this.createInteractionParticle();
            }
            this.interactionParticle.x = e.offsetX;
            this.interactionParticle.y = e.offsetY;
          }.bind(this);

          this.onTouchMove = function (e) {
            e.preventDefault();
            this.touchIsMoving = true;
            if (!this.interactionParticle) {
              this.createInteractionParticle();
            }
            this.interactionParticle.x = e.changedTouches[0].clientX;
            this.interactionParticle.y = e.changedTouches[0].clientY;
          }.bind(this);

          this.onMouseDown = function (e) {
            this.mouseIsDown = true;
            var counter = 0;
            var quantity = this.spawnQuantity;
            var intervalId = setInterval(
              function () {
                if (this.mouseIsDown) {
                  if (counter === 1) {
                    quantity = 1;
                  }
                  for (var i = 0; i < quantity; i++) {
                    if (this.interactionParticle) {
                      this.particles.push(
                        new Particle(
                          this,
                          this.interactionParticle.x,
                          this.interactionParticle.y
                        )
                      );
                    }
                  }
                } else {
                  clearInterval(intervalId);
                }
                counter++;
              }.bind(this),
              50
            );
          }.bind(this);

          this.onTouchStart = function (e) {
            e.preventDefault();
            setTimeout(
              function () {
                if (!this.touchIsMoving) {
                  for (var i = 0; i < this.spawnQuantity; i++) {
                    this.particles.push(
                      new Particle(
                        this,
                        e.changedTouches[0].clientX,
                        e.changedTouches[0].clientY
                      )
                    );
                  }
                }
              }.bind(this),
              200
            );
          }.bind(this);

          this.onMouseUp = function (e) {
            this.mouseIsDown = false;
          }.bind(this);

          this.onMouseOut = function (e) {
            this.removeInteractionParticle();
          }.bind(this);

          this.onTouchEnd = function (e) {
            e.preventDefault();
            this.touchIsMoving = false;
            this.removeInteractionParticle();
          }.bind(this);

          this.canvas.addEventListener("mousemove", this.onMouseMove);
          this.canvas.addEventListener("touchmove", this.onTouchMove);
          this.canvas.addEventListener("mousedown", this.onMouseDown);
          this.canvas.addEventListener("touchstart", this.onTouchStart);
          this.canvas.addEventListener("mouseup", this.onMouseUp);
          this.canvas.addEventListener("mouseout", this.onMouseOut);
          this.canvas.addEventListener("touchend", this.onTouchEnd);
        };

        ParticleNetwork.prototype.unbindUiActions = function () {
          if (this.canvas) {
            this.canvas.removeEventListener("mousemove", this.onMouseMove);
            this.canvas.removeEventListener("touchmove", this.onTouchMove);
            this.canvas.removeEventListener("mousedown", this.onMouseDown);
            this.canvas.removeEventListener("touchstart", this.onTouchStart);
            this.canvas.removeEventListener("mouseup", this.onMouseUp);
            this.canvas.removeEventListener("mouseout", this.onMouseOut);
            this.canvas.removeEventListener("touchend", this.onTouchEnd);
          }
        };

        var getLimitedRandom = function (min, max, roundToInteger) {
          var number = Math.random() * (max - min) + min;
          if (roundToInteger) {
            number = Math.round(number);
          }
          return number;
        };

        var returnRandomArrayitem = function (array) {
          return array[Math.floor(Math.random() * array.length)];
        };

        pna = new ParticleNetworkAnimation();
        pna.init($(".particle-network-animation")[0]);
      })();

      const canvas = document.getElementById("waterCanvas");
      const ctx = canvas.getContext("2d");
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;

      const waves = [];
      const waveCount = 25;

      for (let i = 0; i < waveCount; i++) {
        waves.push({
          y: canvas.height / 2 - 100 + Math.random() * 200, // 中央付近に分布
          length: 0.01 + Math.random() * 0.001,
          amplitude: 50 + Math.random() * 100,
          frequency: 0.01 + Math.random() * 0.03,
          phase: Math.random() * Math.PI * 2,
        });
      }

      function animate() {
        requestAnimationFrame(animate);
        ctx.fillStyle = "rgba(0, 0, 0, 0.03)"; // 透明度を0.1に調整
        ctx.fillRect(0, 0, canvas.width, canvas.height);

        waves.forEach((wave, index) => {
          ctx.beginPath();
          ctx.moveTo(0, wave.y);
          for (let i = 0; i < canvas.width; i++) {
            const yOffset =
              Math.sin(i * wave.length + wave.phase) *
              wave.amplitude *
              Math.sin(wave.phase);
            ctx.lineTo(i, wave.y + yOffset);
          }
          ctx.strokeStyle = `hsl(${index / 2 + 170}, 100%, 50%)`;
          ctx.stroke();
          wave.phase += wave.frequency;
        });
      }

      animate();

      window.addEventListener("resize", () => {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        waves.forEach((wave) => {
          wave.y = canvas.height / 2 - 100 + Math.random() * 200; // 中央付近に再配置
        });
      });
    </script>
    <script> 
		/*
inspiration
https://cz.pinterest.com/pin/830703093790696716/
*/

var swiper = new Swiper(".swiper", {
  effect: "coverflow",
  grabCursor: true,
  centeredSlides: true,
  coverflowEffect: {
    rotate: 0,
    stretch: 0,
    depth: 100,
    modifier: 4,
    slideShadows: true
  },
  loop: true,
  // Navigation arrows
  navigation: {
    nextEl: ".swiper-button-next",
    prevEl: ".swiper-button-prev"
  },
  keyboard: {
    enabled: true
  },
  mousewheel: {
    thresholdDelta: 70
  },
  breakpoints: {
    560: {
      slidesPerView: 2.5
    },
    768: {
      slidesPerView: 3
    },
    1024: {
      slidesPerView: 3
    }
  }
}); </script>
    <script src="https://cpwebassets.codepen.io/assets/editor/iframe/iframeRefreshCSS-44fe83e49b63affec96918c9af88c0d80b209a862cf87ac46bc933074b8c557d.js"></script>
  </body>
</html>
